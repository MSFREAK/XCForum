<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd"
	default-autowire="byName" default-lazy-init="false">

	<!-- 自动扫描包(自动注入) -->
	<context:component-scan base-package="com.bbx.service, com.bbx.dao" />
	<!-- 引入属性文件 -->
	<context:property-placeholder location="classpath*:config.properties" />

	<!-- 配置数据源 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />

		<property name="filters" value="stat" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="1" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="1" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<property name="poolPreparedStatements" value="true" />
		<property name="maxOpenPreparedStatements" value="20" />
	</bean>

	<!-- 配置hibernate会话工厂以及hibernate属性 -->
	<!-- org.springframework.orm.hibernate4.LocalSessionFactoryBean -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 指定数据源 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 注解方式实体映射 -->
		<!-- 自动扫描注解方式配置的hibernate实体类 -->
		<property name="packagesToScan">
			<list>
				<value>com.bbx.domain</value>
			</list>
		</property>
		<!-- hibernate的相关属性配置 -->
		<property name="hibernateProperties">
			<props>
				<!-- 设置数据库方言 -->
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<!-- 设置自动创建|更新|验证数据库表结构 -->
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<!-- 是否在控制台显示sql -->
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<!-- 是否格式化sql，优化显示 -->
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<!-- 是否自动提交事务，默认是true -->
				<prop key="hibernate.connection.autocommit">${hibernate.connection.autocommit}</prop>
			</props>

			<!-- 是否开启二级缓存 -->
			<!-- hibernate.cache.use_second_level_cache=${hibernate.cache.use_second_level_cache} -->
			<!-- 是否开启查询缓存 -->
			<!-- hibernate.cache.use_query_cache=${hibernate.cache.use_query_cache} -->
			<!-- 设置二级缓存插件EHCache的Provider类 -->
			<!-- hibernate.cache.provider_class=${hibernate.cache.provider_class} -->
			<!-- 数据库批量更新、添加、删除操作最大数 -->
			<!-- hibernate.jdbc.batch_size=${hibernate.jdbc.batch_size} -->
			<!-- 数据库批量查询最大数 -->
			<!-- hibernate.jdbc.fetch_size=${hibernate.jdbc.fetch_size} -->
			<!-- 是否自动提交事务，默认是true -->
			<!-- hibernate.connection.autocommit=true -->
			<!-- 指定hibernate在何时释放JDBC连接 -->
			<!-- hibernate.connection.release_mode=${hibernate.connection.release_mode} -->
			<!-- 创建session方式 hibernate4.x 的方式 -->
			<!-- hibernate.current_session_context_class=org.springframework.orm.hibernate4.SpringSessionContext -->
			<!-- javax.persistence.validation.mode默认情况下是auto的， 就是说如果不设置的话它是会自动去你的classpath下面找一个bean-validation**包所以把它设置为none即可 -->
			<!-- javax.persistence.validation.mode=none -->
		</property>
	</bean>

	<!-- 配置声明式事务管理器,单数据源事务 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 注解方式配置事物 -->
	<!-- 默认查找名为transactionManager的事务管理器，因此transaction-manager发生可以省略 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 配置HibernateTemplate Bean -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<!-- <aop:config> -->
	<!-- <aop:pointcut expression="execution(* com.bbx.service.impl..*Service.*(..))" -->
	<!-- id="bussinessService" /> -->
	<!-- <aop:advisor pointcut-ref="bussinessService" advice-ref="txAdvice" /> -->
	<!-- </aop:config> -->

	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager"> -->
	<!-- <tx:attributes> -->
	<!-- <tx:method name="SerialT*" propagation="REQUIRES_NEW" /> -->
	<!-- <tx:method name="add*" propagation="REQUIRED" /> -->
	<!-- <tx:method name="save*" read-only="false" propagation="REQUIRED" /> -->
	<!-- <tx:method name="del*" propagation="REQUIRED" /> -->
	<!-- <tx:method name="update*" propagation="REQUIRED" /> -->
	<!-- <tx:method name="get*" read-only="true" /> -->
	<!-- <tx:method name="query*" read-only="true" /> -->
	<!-- <tx:method name="find*" read-only="true" /> -->
	<!-- <tx:method name="load*" read-only="true" /> -->
	<!-- <tx:method name="count*" read-only="true" /> -->
	<!-- <tx:method name="check*" read-only="true" /> -->
	<!-- <tx:method name="*" rollback-for="Exception" /> -->
	<!-- </tx:attributes> -->
	<!-- </tx:advice> -->

	<!-- 配置druid监控spring jdbc -->
	<!-- <bean id="druid-stat-interceptor" -->
	<!-- class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"> -->
	<!-- </bean> -->
	<!-- <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" -->
	<!-- scope="prototype"> -->
	<!-- <property name="patterns"> -->
	<!-- <list> -->
	<!-- <value>com.bbx.*</value> -->
	<!-- </list> -->
	<!-- </property> -->
	<!-- </bean> -->
	<!-- <aop:config> -->
	<!-- <aop:advisor advice-ref="druid-stat-interceptor" -->
	<!-- pointcut-ref="druid-stat-pointcut" /> -->
	<!-- </aop:config> -->
</beans>